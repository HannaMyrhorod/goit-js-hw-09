{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAkBtC,SAASI,EAAmBC,EAAUC,IAetC,SAAuBD,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YACpBA,OAtBYQ,CAAcT,EAAUC,GACtCS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MACjBX,EAAAwB,OAAOC,QAAQ,qBAAoCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,WAE1DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MAClBX,EAAAwB,OAAOI,QAAQ,oBAAmCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,WAG5DL,YAAW,eAzBbhB,EAAKC,KAAK0B,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAIpB,EAAQqB,OAAO9B,EAAKI,WAAW2B,OAC/BC,EAAOF,OAAO9B,EAAKK,UAAU0B,OAC7BE,EAASH,OAAO9B,EAAKM,YAAYyB,OAE5BG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChC3B,EAAmB2B,EAAGzB,GACtBA,GAASuB,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name = delay]'),\n  stepInput: document.querySelector('input[name = step]'),\n  amountInput: document.querySelector('input[name = amount]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(refs.delayInput.value);\n  let step = Number(refs.stepInput.value);\n  let amount = Number(refs.amountInput.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    setPromisesTimeout(i, delay);\n    delay += step;\n  };\n};\n\nfunction setPromisesTimeout(position, delay) {\n   \n  const promises = createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n    }); \n  \n  setTimeout(() => {\n    promises, delay\n  });\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n        reject({ position, delay });\n    }, delay);\n  });\n};\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$ce04d3a99e08e73b$var$setPromisesTimeout","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","Number","value","step","amount","i"],"version":3,"file":"03-promises.24371a19.js.map"}